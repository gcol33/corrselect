// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "corrselect_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// findAllMaxSets
List findAllMaxSets(NumericMatrix corMatrix, double threshold, std::string method, Nullable<IntegerVector> force_in, Nullable<bool> use_pivot);
RcppExport SEXP _corrselect_findAllMaxSets(SEXP corMatrixSEXP, SEXP thresholdSEXP, SEXP methodSEXP, SEXP force_inSEXP, SEXP use_pivotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type corMatrix(corMatrixSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type force_in(force_inSEXP);
    Rcpp::traits::input_parameter< Nullable<bool> >::type use_pivot(use_pivotSEXP);
    rcpp_result_gen = Rcpp::wrap(findAllMaxSets(corMatrix, threshold, method, force_in, use_pivot));
    return rcpp_result_gen;
END_RCPP
}
// runBronKerbosch
ComboList runBronKerbosch(const NumericMatrix& corMatrix, double threshold, const Combo& forcedVec, bool usePivot);
RcppExport SEXP _corrselect_runBronKerbosch(SEXP corMatrixSEXP, SEXP thresholdSEXP, SEXP forcedVecSEXP, SEXP usePivotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type corMatrix(corMatrixSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< const Combo& >::type forcedVec(forcedVecSEXP);
    Rcpp::traits::input_parameter< bool >::type usePivot(usePivotSEXP);
    rcpp_result_gen = Rcpp::wrap(runBronKerbosch(corMatrix, threshold, forcedVec, usePivot));
    return rcpp_result_gen;
END_RCPP
}
// runELS
ComboList runELS(const NumericMatrix& corMatrix, double threshold, const Combo& forcedVec);
RcppExport SEXP _corrselect_runELS(SEXP corMatrixSEXP, SEXP thresholdSEXP, SEXP forcedVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type corMatrix(corMatrixSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< const Combo& >::type forcedVec(forcedVecSEXP);
    rcpp_result_gen = Rcpp::wrap(runELS(corMatrix, threshold, forcedVec));
    return rcpp_result_gen;
END_RCPP
}
// runSpectral
ComboList runSpectral(const NumericMatrix& corMatrix, double threshold, const Combo& forcedVec, int lengthLimit, Rcpp::Nullable<int> k_param);
RcppExport SEXP _corrselect_runSpectral(SEXP corMatrixSEXP, SEXP thresholdSEXP, SEXP forcedVecSEXP, SEXP lengthLimitSEXP, SEXP k_paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type corMatrix(corMatrixSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< const Combo& >::type forcedVec(forcedVecSEXP);
    Rcpp::traits::input_parameter< int >::type lengthLimit(lengthLimitSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<int> >::type k_param(k_paramSEXP);
    rcpp_result_gen = Rcpp::wrap(runSpectral(corMatrix, threshold, forcedVec, lengthLimit, k_param));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_corrselect_findAllMaxSets", (DL_FUNC) &_corrselect_findAllMaxSets, 5},
    {"_corrselect_runBronKerbosch", (DL_FUNC) &_corrselect_runBronKerbosch, 4},
    {"_corrselect_runELS", (DL_FUNC) &_corrselect_runELS, 3},
    {"_corrselect_runSpectral", (DL_FUNC) &_corrselect_runSpectral, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_corrselect(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

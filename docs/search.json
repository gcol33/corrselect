[{"path":"https://gcol33.github.io/corrselect/articles/corrselect_upcoming.html","id":"upcoming-features-in-corrselect-2-1-0","dir":"Articles","previous_headings":"","what":"Upcoming Features in corrselect 2.1.0","title":"Upcoming Features in corrselect 2.1.0","text":"vignette introduces features available version 2.1.0 corrselect package. enhancements aim provide flexibility alternative strategies variable subset selection.","code":""},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_upcoming.html","id":"spectral-method-prototype","dir":"Articles","previous_headings":"Upcoming Features in corrselect 2.1.0","what":"Spectral Method (Prototype)","title":"Upcoming Features in corrselect 2.1.0","text":"new selection strategy based spectral clustering currently development. approach performs normalized spectral clustering correlation matrix identify sets weakly correlated variables.","code":""},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_upcoming.html","id":"rationale","dir":"Articles","previous_headings":"Upcoming Features in corrselect 2.1.0 > Spectral Method (Prototype)","what":"Rationale","title":"Upcoming Features in corrselect 2.1.0","text":"Unlike local exhaustive search algorithms, spectral clustering provides global approximation can rapidly identify candidate subsets minimal internal association.","code":""},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_upcoming.html","id":"overview-of-steps","dir":"Articles","previous_headings":"Upcoming Features in corrselect 2.1.0 > Spectral Method (Prototype)","what":"Overview of Steps","title":"Upcoming Features in corrselect 2.1.0","text":"algorithm follows steps: Similarity matrix absolute correlations: Sij=1−|rij|S_{ij} = 1 - |r_{ij}| Degree vector: Di=∑jSijD_i = \\sum_j S_{ij} Normalized Laplacian: L=−D−1/2SD−1/2L = - D^{-1/2} S D^{-1/2} Eigen decomposition LL K-means clustering reduced eigenvector space Validation cluster based correlation threshold forced variables","code":""},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_upcoming.html","id":"basic-example","dir":"Articles","previous_headings":"Upcoming Features in corrselect 2.1.0 > Spectral Method (Prototype)","what":"Basic Example","title":"Upcoming Features in corrselect 2.1.0","text":"","code":"set.seed(1) mat <- matrix(rnorm(100), ncol = 10) colnames(mat) <- paste0(\"V\", 1:10) cmat <- cor(mat)  res <- MatSelect(cmat, threshold = 0.5, method = \"spectral\") res"},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_upcoming.html","id":"customizing-the-number-of-clusters","dir":"Articles","previous_headings":"Upcoming Features in corrselect 2.1.0 > Spectral Method (Prototype)","what":"Customizing the Number of Clusters","title":"Upcoming Features in corrselect 2.1.0","text":"can pass integer k override default number clusters: Note method still testing might change release.","code":"res <- MatSelect(cmat, threshold = 0.5, method = \"spectral\", k = 4)"},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_upcoming.html","id":"availability","dir":"Articles","previous_headings":"Upcoming Features in corrselect 2.1.0","what":"Availability","title":"Upcoming Features in corrselect 2.1.0","text":"feature available version 2.1.0. ’re interested testing early, can install development version GitHub: welcome feedback suggestions via GitHub issues direct contact.","code":"# install.packages(\"devtools\") devtools::install_github(\"gcol33/corrselect\")"},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_vignette.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Correlation Subset Selection with corrselect","text":"corrselect identifies maximal subsets variables whose pairwise correlations stay chosen threshold. process reduces multicollinearity redundancy modeling, preserving interpretability. Unlike greedy stepwise approaches, corrselect exhaustively searches valid subsets using fast, exact algorithms. fully model-agnostic, making suitable preprocessing step regression, clustering, feature selection, analyses. Given threshold t∈(0,1)t \\(0,1), functions corrSelect() (data-frame interface) MatSelect() (matrix interface) enumerate maximal subsets SS variables satisfying: ∀,j∈S,≠j:|rij|<t \\forall , j \\S,\\ \\neq j: \\ |r_{ij}| < t rijr_{ij} denotes chosen correlation measure variables ii jj. Enumeration relies two exact graph-theoretic algorithms: Eppstein–Löffler–Strash (ELS), degeneracy-ordered backtracking algorithm optimized sparse graphs. Bron–Kerbosch (BK), classical recursive clique-finding method, optional pivoting reduce search space. Results returned CorrCombo S4 object containing subset’s variable names summary statistics (avg_corr, min_corr, max_corr). can extract subsets original data via corrSubset(). procedure depend downstream model, cleanly separates “feature curation” “model fitting” supports multiple correlation measures (pearson, spearman, kendall, bicor, distance, maximal).","code":""},{"path":[]},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_vignette.html","id":"simulated-numeric-example","dir":"Articles","previous_headings":"Quick Start (CorrSelect)","what":"Simulated numeric example","title":"Correlation Subset Selection with corrselect","text":"","code":"set.seed(42) n <- 100 df <- data.frame(   A = rnorm(n),   B = rnorm(n),   C = rnorm(n),   D = rnorm(n),   E = rnorm(n) ) df$F <- df$A * 0.9 + rnorm(n, sd = 0.1)  # strongly correlated with A"},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_vignette.html","id":"basic-selection","dir":"Articles","previous_headings":"Quick Start (CorrSelect)","what":"Basic selection","title":"Correlation Subset Selection with corrselect","text":"","code":"res <- corrSelect(df, threshold = 0.7) res #> CorrCombo object #> ----------------- #>   Method:      bron-kerbosch #>   Correlation: pearson #>   Threshold:   0.700 #>   Subsets:     2 valid combinations #>   Data Rows:   100 used in correlation #>   Pivot:       TRUE #>  #> Top combinations: #>   No.  Variables                          Avg    Max    Size #>   ------------------------------------------------------------ #>   [ 1] F, B, C, D, E                     0.082  0.185     5 #>   [ 2] A, B, C, D, E                     0.083  0.185     5 as.data.frame(res) #>                      VarName01 VarName02 VarName03 VarName04 VarName05 #> Subset01 [avg=0.082]         F         B         C         D         E #> Subset02 [avg=0.083]         A         B         C         D         E corrSubset(res, df, which = 1)[1:10,] #>              F          B          C            D           E #> 1   1.33677667  1.2009654 -2.0009292 -0.004620768  1.33491259 #> 2  -0.41675087  1.0447511  0.3337772  0.760242168 -0.86927176 #> 3   0.32656994 -1.0032086  1.1713251  0.038990913  0.05548695 #> 4   0.58317730  1.8484819  2.0595392  0.735072142  0.04906691 #> 5   0.29182614 -0.6667734 -1.3768616 -0.146472627 -0.57835573 #> 6  -0.11532450  0.1055138 -1.1508556 -0.057887335 -0.99873866 #> 7   1.25744892 -0.4222559 -0.7058214  0.482369466 -0.00243278 #> 8  -0.18188872 -0.1223502 -1.0540558  0.992943637  0.65551188 #> 9   1.69450003  0.1881930 -0.6457437 -1.246395498  1.47684228 #> 10  0.02717808  0.1191610 -0.1853780 -0.033487525 -1.90915279"},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_vignette.html","id":"forcing-variables-into-all-subsets","dir":"Articles","previous_headings":"Quick Start (CorrSelect)","what":"Forcing variables into all subsets","title":"Correlation Subset Selection with corrselect","text":"","code":"res2 <- corrSelect(df, threshold = 0.7, force_in = \"A\") res2 #> CorrCombo object #> ----------------- #>   Method:      els #>   Correlation: pearson #>   Threshold:   0.700 #>   Subsets:     1 valid combinations #>   Data Rows:   100 used in correlation #>   Forced-in:   A #>  #> Top combinations: #>   No.  Variables                          Avg    Max    Size #>   ------------------------------------------------------------ #>   [ 1] A, B, C, D, E                     0.083  0.185     5"},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_vignette.html","id":"using-a-different-correlation-method","dir":"Articles","previous_headings":"Quick Start (CorrSelect)","what":"Using a different correlation method","title":"Correlation Subset Selection with corrselect","text":"","code":"res3 <- corrSelect(df, threshold = 0.6, cor_method = \"spearman\") res3 #> CorrCombo object #> ----------------- #>   Method:      bron-kerbosch #>   Correlation: spearman #>   Threshold:   0.600 #>   Subsets:     2 valid combinations #>   Data Rows:   100 used in correlation #>   Pivot:       TRUE #>  #> Top combinations: #>   No.  Variables                          Avg    Max    Size #>   ------------------------------------------------------------ #>   [ 1] F, B, C, D, E                     0.088  0.191     5 #>   [ 2] A, B, C, D, E                     0.090  0.206     5"},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_vignette.html","id":"matrix-interface-matselect","dir":"Articles","previous_headings":"","what":"Matrix Interface (MatSelect)","title":"Correlation Subset Selection with corrselect","text":"already computed correlation matrix want apply method precomputed correlations: Selecting subsets: Force variable 1 every subset:","code":"mat <- cor(df) res4 <- MatSelect(mat, threshold = 0.7) res4 #> CorrCombo object #> ----------------- #>   Method:      bron-kerbosch #>   Threshold:   0.700 #>   Subsets:     2 valid combinations #>   Data Rows:   6 used in correlation #>   Pivot:       TRUE #>  #> Top combinations: #>   No.  Variables                          Avg    Max    Size #>   ------------------------------------------------------------ #>   [ 1] F, B, C, D, E                     0.082  0.185     5 #>   [ 2] A, B, C, D, E                     0.083  0.185     5 MatSelect(mat, threshold = 0.5) #> CorrCombo object #> ----------------- #>   Method:      bron-kerbosch #>   Threshold:   0.500 #>   Subsets:     2 valid combinations #>   Data Rows:   6 used in correlation #>   Pivot:       TRUE #>  #> Top combinations: #>   No.  Variables                          Avg    Max    Size #>   ------------------------------------------------------------ #>   [ 1] F, B, C, D, E                     0.082  0.185     5 #>   [ 2] A, B, C, D, E                     0.083  0.185     5 MatSelect(mat, threshold = 0.5, force_in = 1) #> CorrCombo object #> ----------------- #>   Method:      els #>   Threshold:   0.500 #>   Subsets:     1 valid combinations #>   Data Rows:   6 used in correlation #>   Forced-in:   A #>  #> Top combinations: #>   No.  Variables                          Avg    Max    Size #>   ------------------------------------------------------------ #>   [ 1] A, B, C, D, E                     0.083  0.185     5"},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_vignette.html","id":"mixed-data-types-assocselect","dir":"Articles","previous_headings":"","what":"Mixed Data Types (assocSelect)","title":"Correlation Subset Selection with corrselect","text":"","code":"df_ass <- data.frame(   height = rnorm(15, 170, 10),   weight = rnorm(15, 70, 12),   group  = factor(rep(LETTERS[1:3], each = 5)),   score  = ordered(sample(c(\"low\",\"med\",\"high\"), 15, TRUE)) )  # keep every subset whose internal associations ≤ 0.6 res5 <- assocSelect(df_ass, threshold = 0.6) res5 #> CorrCombo object #> ----------------- #>   Method:      bron-kerbosch #>   Correlation: mixed #>   AssocMethod: numeric_numeric = pearson, numeric_factor = eta, numeric_ordered #>                = spearman, factor_ordered = cramersv #>   Threshold:   0.600 #>   Subsets:     1 valid combinations #>   Data Rows:   15 used in correlation #>   Pivot:       TRUE #>  #> Top combinations: #>   No.  Variables                          Avg    Max    Size #>   ------------------------------------------------------------ #>   [ 1] height, weight, group, score      0.174  0.332     4"},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_vignette.html","id":"changing-correlation-method","dir":"Articles","previous_headings":"","what":"Changing Correlation Method","title":"Correlation Subset Selection with corrselect","text":"default, corrSelect() uses Pearson correlation. can choose alternatives cor_method argument: \"pearson\": linear correlation (default) \"spearman\": rank-based monotonic association \"kendall\": Kendall’s tau \"bicor\": robust biweight midcorrelation (WGCNA::bicor) \"distance\": distance correlation (energy::dcor) \"maximal\": maximal information coefficient (minerva::mine) Example:","code":"res6 <- corrSelect(df, threshold = 0.7, cor_method = \"spearman\") res6 #> CorrCombo object #> ----------------- #>   Method:      bron-kerbosch #>   Correlation: spearman #>   Threshold:   0.700 #>   Subsets:     2 valid combinations #>   Data Rows:   100 used in correlation #>   Pivot:       TRUE #>  #> Top combinations: #>   No.  Variables                          Avg    Max    Size #>   ------------------------------------------------------------ #>   [ 1] F, B, C, D, E                     0.088  0.191     5 #>   [ 2] A, B, C, D, E                     0.090  0.206     5"},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_vignette.html","id":"handling-mixed-data-types","dir":"Articles","previous_headings":"","what":"Handling Mixed Data Types","title":"Correlation Subset Selection with corrselect","text":"function assocSelect() extends corrSelect() support mixed data types — including numeric, factor, ordered variables — using appropriate association measures variable pair. Instead single correlation matrix, constructs generalized association matrix using following logic: defaults numeric-numeric, numeric-ordered, ordered-ordered associations can changed via arguments: combinations use fixed methods (eta cramersv) appropriate measuring association strength.","code":"assocSelect(df_ass,   method_num_num = \"kendall\",   method_num_ord = \"spearman\",   method_ord_ord = \"kendall\" ) #> CorrCombo object #> ----------------- #>   Method:      bron-kerbosch #>   Correlation: mixed #>   AssocMethod: numeric_numeric = kendall, numeric_factor = eta, numeric_ordered #>                = spearman, factor_ordered = cramersv #>   Threshold:   0.700 #>   Subsets:     1 valid combinations #>   Data Rows:   15 used in correlation #>   Pivot:       TRUE #>  #> Top combinations: #>   No.  Variables                          Avg    Max    Size #>   ------------------------------------------------------------ #>   [ 1] height, weight, group, score      0.178  0.332     4"},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_vignette.html","id":"example-with-mixed-types","dir":"Articles","previous_headings":"Handling Mixed Data Types","what":"Example with Mixed Types","title":"Correlation Subset Selection with corrselect","text":"pairwise association bounded [0,1] treated analogously correlation.","code":"df_ass <- data.frame(   height = rnorm(10),   weight = rnorm(10),   group  = factor(sample(c(\"A\", \"B\"), 10, replace = TRUE)),   score  = ordered(sample(1:3, 10, replace = TRUE)) )  res7 <- assocSelect(df_ass, threshold = 1, method = \"bron-kerbosch\", use_pivot = TRUE) res7 #> CorrCombo object #> ----------------- #>   Method:      bron-kerbosch #>   Correlation: mixed #>   AssocMethod: numeric_numeric = pearson, numeric_factor = eta, numeric_ordered #>                = spearman, factor_ordered = cramersv #>   Threshold:   1.000 #>   Subsets:     1 valid combinations #>   Data Rows:   10 used in correlation #>   Pivot:       TRUE #>  #> Top combinations: #>   No.  Variables                          Avg    Max    Size #>   ------------------------------------------------------------ #>   [ 1] height, weight, group, score      0.336  0.495     4"},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_vignette.html","id":"theory","dir":"Articles","previous_headings":"","what":"Theory","title":"Correlation Subset Selection with corrselect","text":"Given symmetric correlation matrix R∈ℝp×pR \\\\mathbb{R}^{p \\times p}, seek maximal subsets S⊆{1,…,p}S \\subseteq \\{1, \\dots, p\\} : ∀,j∈S,≠j:|Rij|<t \\forall , j \\S,\\ \\neq j: \\ |R_{ij}| < t fixed threshold t∈(0,1)t \\(0, 1). equivalent finding maximal cliques thresholded correlation graph, : Nodes represent variables Edges connect nodes whose absolute correlation threshold maximal clique corresponds variable subset extended without violating correlation limit.","code":""},{"path":[]},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_vignette.html","id":"els-eppsteinlöfflerstrash","dir":"Articles","previous_headings":"Algorithms","what":"ELS (Eppstein–Löffler–Strash)","title":"Correlation Subset Selection with corrselect","text":"ELS algorithm efficiently enumerates maximal cliques sparse graph using degeneracy ordering: Compute degeneracy ordering v1,…,vpv_1, \\dots, v_p. ii, extend current clique SS {vi}\\{v_i\\} within candidate set C={vi+1,…,vp}C = \\{v_{+1}, \\dots, v_p\\}. Recursively build cliques, pruning vertices can added. Formally, define: extend(S,C)={S,C=∅,⋃v∈Cextend(S∪{v},C\\(N(v)∪{v})),otherwise. \\text{extend}(S, C) = \\begin{cases} S, & C = \\emptyset, \\\\ \\bigcup_{v \\C} \\text{extend}(S \\cup \\{v\\},\\ C \\setminus (N(v) \\cup \\{v\\})), & \\text{otherwise}. \\end{cases} ELS avoids redundant exploration, achieving good performance typical correlation graphs.","code":""},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_vignette.html","id":"bronkerbosch-with-pivoting","dir":"Articles","previous_headings":"Algorithms","what":"Bron–Kerbosch (with Pivoting)","title":"Correlation Subset Selection with corrselect","text":"classical Bron–Kerbosch algorithm enumerates maximal cliques via recursive backtracking optional pivoting: Let RR = current clique, PP = prospective nodes, XX = excluded nodes. : BK(R,P,X)={report(R),P=X=∅,v∈P\\N(u):BK(R∪{v},P∩N(v),X∩N(v)),P←P\\{v},X←X∪{v}. \\text{BK}(R, P, X) = \\begin{cases} \\text{report}(R), & P = X = \\emptyset, \\\\ \\text{} v \\P \\setminus N(u): \\\\ \\quad \\text{BK}(R \\cup \\{v\\},\\ P \\cap N(v),\\ X \\cap N(v)), \\ \\quad P \\leftarrow P \\setminus \\{v\\},\\ X \\leftarrow X \\cup \\{v\\}. \\end{cases} Choosing pivot u∈P∪Xu \\P \\cup X iterating P\\N(u)P \\setminus N(u) reduces recursive calls.","code":""},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_vignette.html","id":"why-corrselect","dir":"Articles","previous_headings":"","what":"Why corrselect?","title":"Correlation Subset Selection with corrselect","text":"existing R tools: Filter one variable time (e.g. findCorrelation) Use greedy backward-selection heuristics enumerate valid subsets corrselect uniquely provides: Exact enumeration maximal subsets Support multiple correlation measures Optional forcing variables Full inspection via CorrCombo objects Fast C++ implementations via Rcpp makes ideal pipelines interpretability completeness essential.","code":""},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_vignette.html","id":"inspecting-results","dir":"Articles","previous_headings":"","what":"Inspecting Results","title":"Correlation Subset Selection with corrselect","text":"Convert results downstream use: Extract individual subsets: Summarize correlation metrics:","code":"df_res <- as.data.frame(res) head(df_res) #>                      VarName01 VarName02 VarName03 VarName04 VarName05 #> Subset01 [avg=0.082]         F         B         C         D         E #> Subset02 [avg=0.083]         A         B         C         D         E lapply(corrSubset(res, df, which = 1:2), function(x) head(x, 10)) #> $Subset1 #>              F          B          C            D           E #> 1   1.33677667  1.2009654 -2.0009292 -0.004620768  1.33491259 #> 2  -0.41675087  1.0447511  0.3337772  0.760242168 -0.86927176 #> 3   0.32656994 -1.0032086  1.1713251  0.038990913  0.05548695 #> 4   0.58317730  1.8484819  2.0595392  0.735072142  0.04906691 #> 5   0.29182614 -0.6667734 -1.3768616 -0.146472627 -0.57835573 #> 6  -0.11532450  0.1055138 -1.1508556 -0.057887335 -0.99873866 #> 7   1.25744892 -0.4222559 -0.7058214  0.482369466 -0.00243278 #> 8  -0.18188872 -0.1223502 -1.0540558  0.992943637  0.65551188 #> 9   1.69450003  0.1881930 -0.6457437 -1.246395498  1.47684228 #> 10  0.02717808  0.1191610 -0.1853780 -0.033487525 -1.90915279 #>  #> $Subset2 #>              A          B          C            D           E #> 1   1.37095845  1.2009654 -2.0009292 -0.004620768  1.33491259 #> 2  -0.56469817  1.0447511  0.3337772  0.760242168 -0.86927176 #> 3   0.36312841 -1.0032086  1.1713251  0.038990913  0.05548695 #> 4   0.63286260  1.8484819  2.0595392  0.735072142  0.04906691 #> 5   0.40426832 -0.6667734 -1.3768616 -0.146472627 -0.57835573 #> 6  -0.10612452  0.1055138 -1.1508556 -0.057887335 -0.99873866 #> 7   1.51152200 -0.4222559 -0.7058214  0.482369466 -0.00243278 #> 8  -0.09465904 -0.1223502 -1.0540558  0.992943637  0.65551188 #> 9   2.01842371  0.1881930 -0.6457437 -1.246395498  1.47684228 #> 10 -0.06271410  0.1191610 -0.1853780 -0.033487525 -1.90915279 # Number and size of subsets length(res@subset_list) #> [1] 2 summary(lengths(res@subset_list)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>       5       5       5       5       5       5  # Summaries of within-subset correlations summary(res@max_corr) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   0.185   0.185   0.185   0.185   0.185   0.185 summary(res@avg_corr) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #> 0.08162 0.08185 0.08208 0.08208 0.08232 0.08255"},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_vignette.html","id":"corrcombo-object-structure","dir":"Articles","previous_headings":"","what":"CorrCombo Object Structure","title":"Correlation Subset Selection with corrselect","text":"CorrCombo S4 object contains: subset_list: list character vectors (variable names) avg_corr, min_corr, max_corr: numeric vectors correlation metrics threshold, forced_in, search_type, cor_method, n_rows_used Attribute use_pivot (applicable) Inspect slots:","code":"str(res@subset_list) #> List of 2 #>  $ : chr [1:5] \"F\" \"B\" \"C\" \"D\" ... #>  $ : chr [1:5] \"A\" \"B\" \"C\" \"D\" ..."},{"path":"https://gcol33.github.io/corrselect/articles/corrselect_vignette.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Correlation Subset Selection with corrselect","text":"","code":"sessionInfo() #> R version 4.5.1 (2025-06-13 ucrt) #> Platform: x86_64-w64-mingw32/x64 #> Running under: Windows 11 x64 (build 26100) #>  #> Matrix products: default #>   LAPACK version 3.12.1 #>  #> locale: #> [1] LC_COLLATE=English_United States.utf8  #> [2] LC_CTYPE=English_United States.utf8    #> [3] LC_MONETARY=English_United States.utf8 #> [4] LC_NUMERIC=C                           #> [5] LC_TIME=English_United States.utf8     #>  #> time zone: Europe/Luxembourg #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] corrselect_2.0.1 #>  #> loaded via a namespace (and not attached): #>  [1] digest_0.6.37     desc_1.4.3        R6_2.6.1          fastmap_1.2.0     #>  [5] xfun_0.52         cachem_1.1.0      knitr_1.50        htmltools_0.5.8.1 #>  [9] rmarkdown_2.29    lifecycle_1.0.4   cli_3.6.5         sass_0.4.10       #> [13] pkgdown_2.1.3     textshaping_1.0.1 jquerylib_0.1.4   systemfonts_1.2.3 #> [17] compiler_4.5.1    rstudioapi_0.17.1 tools_4.5.1       ragg_1.4.0        #> [21] bslib_0.9.0       evaluate_1.0.4    Rcpp_1.1.0        yaml_2.3.10       #> [25] jsonlite_2.0.0    rlang_1.1.6       fs_1.6.6          htmlwidgets_1.6.4"},{"path":"https://gcol33.github.io/corrselect/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gilles Colling. Author, maintainer.","code":""},{"path":"https://gcol33.github.io/corrselect/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Colling G (2025). corrselect: Correlation-Based Variable Subset Selection. R package version 1.0.0, https://github.com/gcol33/corrselect.","code":"@Manual{,   title = {corrselect: Correlation-Based Variable Subset Selection},   author = {Gilles Colling},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/gcol33/corrselect}, }"},{"path":"https://gcol33.github.io/corrselect/index.html","id":"corrselect","dir":"","previous_headings":"","what":"Correlation-Based Variable Subset Selection","title":"Correlation-Based Variable Subset Selection","text":"Exhaustive, Model-Agnostic Variable Subset Selection Based Pairwise Correlation Association corrselect package automatically identifies maximal subsets variables data whose pairwise correlations associations remain user-defined threshold. helps reduce multicollinearity redundancy retaining interpretability. method model-agnostic, making applicable regression, clustering, ecological modeling, workflows.","code":""},{"path":"https://gcol33.github.io/corrselect/index.html","id":"statement-of-need","dir":"","previous_headings":"","what":"Statement of Need","title":"Correlation-Based Variable Subset Selection","text":"Variable selection central task statistics machine learning, particularly working high-dimensional collinear data. many applications, users aim retain sets variables weakly associated one another avoid redundancy reduce overfitting. Common approaches greedy filtering regularized regression either discard useful features guarantee bounded pairwise associations. package addresses admissible set problem: selecting maximal subsets variables pair exceeds user-defined threshold. generalizes mixed-type data, supports multiple association metrics, allows constrained subset selection via force_in (e.g. always include key predictors). features make package useful domains like: ecological bioclimatic modeling, trait-based species selection, interpretable machine learning pipelines.","code":""},{"path":"https://gcol33.github.io/corrselect/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Correlation-Based Variable Subset Selection","text":"Exhaustive exact subset enumeration using graph algorithms: Eppstein–Löffler–Strash (ELS) Bron–Kerbosch (optional pivoting) Supports multiple correlation/association metrics: \"pearson\", \"spearman\", \"kendall\" \"bicor\" (WGCNA), \"distance\" (energy), \"maximal\" (minerva) \"eta\", \"cramersv\" mixed-type associations Works : data frames (corrSelect() assocSelect()), correlation matrices (MatSelect()) Mixed-type support via assocSelect(): numeric–factor → Eta squared numeric–ordered → Spearman/Kendall factor–factor → Cramér’s V ordered–ordered → Spearman/Kendall force_in: specify variables must included every subset Returns extensible CorrCombo S4 object : subset metadata, correlation/association summaries, custom show() .data.frame() methods","code":""},{"path":"https://gcol33.github.io/corrselect/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Correlation-Based Variable Subset Selection","text":"","code":"# Install from GitHub remotes::install_github(\"gcol33/corrselect\")"},{"path":"https://gcol33.github.io/corrselect/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Correlation-Based Variable Subset Selection","text":"","code":"library(corrselect)  # Simulated numeric example set.seed(1) n <- 100 df <- data.frame(   A = rnorm(n),   B = rnorm(n),   C = rnorm(n),   D = rnorm(n),   E = rnorm(n) ) df$F <- df$A * 0.9 + rnorm(n, sd = 0.1)  # Find all maximal subsets with pairwise Pearson correlation ≤ 0.7 res <- corrSelect(df, threshold = 0.7) show(res)  # Extract the top-ranked subset from the original data subset1 <- corrSubset(res, df, which = 1) head(subset1)  # Convert all subsets to a tidy data frame as.data.frame(res)"},{"path":"https://gcol33.github.io/corrselect/index.html","id":"mixed-data-frames","dir":"","previous_headings":"","what":"Mixed Data Frames","title":"Correlation-Based Variable Subset Selection","text":"Use assocSelect() data frames numeric, factor, ordered variables. function automatically selects appropriate metric pair:","code":"df2 <- data.frame(   height = rnorm(30, 170, 10),   weight = rnorm(30, 70, 12),   group  = factor(sample(c(\"A\",\"B\"), 30, TRUE)),                # unordered   rating = ordered(sample(c(\"low\",\"med\",\"high\"), 30, TRUE))     # ordered )  # Select variable subsets with association ≤ 0.6 res2 <- assocSelect(df2, threshold = 0.6) show(res2)"},{"path":"https://gcol33.github.io/corrselect/index.html","id":"example-output","dir":"","previous_headings":"","what":"Example Output","title":"Correlation-Based Variable Subset Selection","text":"","code":"CorrCombo object -----------------   Method:      bron-kerbosch   Correlation: mixed   Threshold:   0.600   Subsets:     2 valid combinations   Data Rows:   30 used in correlation   Pivot:       TRUE   AssocMethod: numeric_numeric  = pearson,                numeric_factor   = eta,                numeric_ordered  = spearman  Top combinations:   No.  Variables                          Avg    Max    Size   ------------------------------------------------------------   [ 1] height, rating                    0.311  0.562     2   [ 2] weight, rating                    0.317  0.580     2"},{"path":"https://gcol33.github.io/corrselect/index.html","id":"advanced-use","dir":"","previous_headings":"","what":"Advanced Use","title":"Correlation-Based Variable Subset Selection","text":"use precomputed correlation matrix (e.g. MIC custom metrics): can also extract full list subsets use corrSubset() apply data without additional columns.","code":"mat <- cor(df) res <- MatSelect(mat, threshold = 0.7, method = \"els\", force_in = 1)"},{"path":"https://gcol33.github.io/corrselect/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Correlation-Based Variable Subset Selection","text":"MIT (see LICENSE.md)","code":""},{"path":"https://gcol33.github.io/corrselect/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Gilles Colling Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://gcol33.github.io/corrselect/reference/as.data.frame.CorrCombo.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce CorrCombo to a Data Frame — as.data.frame.CorrCombo","title":"Coerce CorrCombo to a Data Frame — as.data.frame.CorrCombo","text":"Converts CorrCombo object data frame variable combinations.","code":""},{"path":"https://gcol33.github.io/corrselect/reference/as.data.frame.CorrCombo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce CorrCombo to a Data Frame — as.data.frame.CorrCombo","text":"","code":"# S3 method for class 'CorrCombo' as.data.frame(x, row.names = NULL, optional = FALSE, ...)"},{"path":"https://gcol33.github.io/corrselect/reference/as.data.frame.CorrCombo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce CorrCombo to a Data Frame — as.data.frame.CorrCombo","text":"x CorrCombo object. row.names Optional row names output data frame. optional Logical. Passed data.frame(). ... Additional arguments passed data.frame().","code":""},{"path":"https://gcol33.github.io/corrselect/reference/as.data.frame.CorrCombo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce CorrCombo to a Data Frame — as.data.frame.CorrCombo","text":"data frame row corresponds subset variables. Columns named VarName01, VarName02, ..., size largest subset. Subsets shorter maximum length padded NA.","code":""},{"path":[]},{"path":"https://gcol33.github.io/corrselect/reference/as.data.frame.CorrCombo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce CorrCombo to a Data Frame — as.data.frame.CorrCombo","text":"","code":"set.seed(1) mat <- matrix(rnorm(100), ncol = 10) colnames(mat) <- paste0(\"V\", 1:10) res <- corrSelect(cor(mat), threshold = 0.5) as.data.frame(res) #>                      VarName01 VarName02 VarName03 #> Subset01 [avg=0.261]        V3        V7       V10 #> Subset02 [avg=0.295]        V1        V7       V10 #> Subset03 [avg=0.300]        V8        V9       V10 #> Subset04 [avg=0.331]        V2        V7       V10 #> Subset05 [avg=0.343]        V9        V7       V10 #> Subset06 [avg=0.350]        V3        V8       V10 #> Subset07 [avg=0.374]        V2        V8       V10 #> Subset08 [avg=0.384]        V6        V7       V10 #> Subset09 [avg=0.388]        V6        V8       V10 #> Subset10 [avg=0.086]        V3        V4      <NA> #> Subset11 [avg=0.098]        V5        V8      <NA> #> Subset12 [avg=0.208]        V1        V4      <NA> #> Subset13 [avg=0.220]        V2        V4      <NA> #> Subset14 [avg=0.295]        V9        V4      <NA> #> Subset15 [avg=0.319]        V6        V4      <NA> #> Subset16 [avg=0.407]        V5        V7      <NA>"},{"path":"https://gcol33.github.io/corrselect/reference/assocSelect.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Variable Subsets with Low Association (Mixed-Type Data Frame Interface) — assocSelect","title":"Select Variable Subsets with Low Association (Mixed-Type Data Frame Interface) — assocSelect","text":"Identifies combinations variables common data type (numeric, ordered factors, unordered) factors—whose pair-wise association exceed user-supplied threshold. routine wraps MatSelect() handles pre-processing (type conversion, missing-row removal, constant-column checks) typical data-frame/tibble/data-table inputs.","code":""},{"path":"https://gcol33.github.io/corrselect/reference/assocSelect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Variable Subsets with Low Association (Mixed-Type Data Frame Interface) — assocSelect","text":"","code":"assocSelect(   df,   threshold = 0.7,   method = NULL,   force_in = NULL,   method_num_num = c(\"pearson\", \"spearman\", \"kendall\", \"bicor\", \"distance\", \"maximal\"),   method_num_ord = c(\"spearman\", \"kendall\"),   method_ord_ord = c(\"spearman\", \"kendall\"),   ... )"},{"path":"https://gcol33.github.io/corrselect/reference/assocSelect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Variable Subsets with Low Association (Mixed-Type Data Frame Interface) — assocSelect","text":"df data frame (tibble / data.table). May contain mix : numeric / integer (treated numeric) ordered factors unordered factors (character vectors coerced factors) threshold Numeric \\((0,1)\\). Maximum allowed pair-wise absolute association. Default 0.7. method Character; subset-search algorithm. One \"els\" \"bron-kerbosch\".  NULL (default) function selects automatically: ELS force_in supplied, otherwise Bron–Kerbosch. force_in Optional character vector column indices specifying variables must appear every returned subset. method_num_num Association measure numeric–numeric pairs. One \"pearson\" (default), \"spearman\", \"kendall\", \"bicor\", \"distance\", \"maximal\". method_num_ord Association measure numeric–ordered pairs. One \"spearman\" (default) \"kendall\". method_ord_ord Association measure ordered–ordered pairs. One \"spearman\" (default) \"kendall\". ... Additional arguments passed unchanged MatSelect() (e.g., use_pivot = TRUE Bron–Kerbosch).","code":""},{"path":"https://gcol33.github.io/corrselect/reference/assocSelect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Variable Subsets with Low Association (Mixed-Type Data Frame Interface) — assocSelect","text":"CorrCombo S4 object containing: valid subsets, summary association statistics, metadata (algorithm used, rows kept, forced-variables, etc.). object’s show() method prints association metrics actually used data set.","code":""},{"path":"https://gcol33.github.io/corrselect/reference/assocSelect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select Variable Subsets with Low Association (Mixed-Type Data Frame Interface) — assocSelect","text":"single call can therefore screen data set mixes continuous categorical features return every subset whose internal associations “sufficiently low” metric(s) choose. Rows containing NA dropped warning; constant columns treated zero association every variable. default association measure variable-type combination : numeric – numeric method_num_num (default \"pearson\") numeric – ordered method_num_ord numeric – unordered \"eta\" (ANOVA \\(\\eta^{2}\\)) ordered – ordered method_ord_ord ordered – unordered \"cramersv\" unordered – unordered \"cramersv\" association measures rescaled \\([0,1]\\) thresholding. External packages required \"bicor\" (WGCNA), \"distance\" (energy), \"maximal\" (minerva); informative error thrown missing.","code":""},{"path":[]},{"path":"https://gcol33.github.io/corrselect/reference/assocSelect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Variable Subsets with Low Association (Mixed-Type Data Frame Interface) — assocSelect","text":"","code":"df <- data.frame(   height = rnorm(15, 170, 10),   weight = rnorm(15, 70, 12),   group  = factor(rep(LETTERS[1:3], each = 5)),   score  = ordered(sample(c(\"low\",\"med\",\"high\"), 15, TRUE)) )  ## keep every subset whose internal associations ≤ 0.6 assocSelect(df, threshold = 0.6) #> CorrCombo object #> ----------------- #>   Method:      bron-kerbosch #>   Correlation: mixed #>   AssocMethod: numeric_numeric = pearson, numeric_factor = eta, numeric_ordered #>                = spearman, factor_ordered = cramersv #>   Threshold:   0.600 #>   Subsets:     1 valid combinations #>   Data Rows:   15 used in correlation #>   Pivot:       TRUE #>  #> Top combinations: #>   No.  Variables                          Avg    Max    Size #>   ------------------------------------------------------------ #>   [ 1] height, weight, group, score      0.174  0.474     4  ## use Kendall for all rank-based comparisons and force 'height' to appear assocSelect(df,             threshold       = 0.5,             method_num_num  = \"kendall\",             method_num_ord  = \"kendall\",             method_ord_ord  = \"kendall\",             force_in        = \"height\") #> CorrCombo object #> ----------------- #>   Method:      els #>   Correlation: mixed #>   AssocMethod: numeric_numeric = kendall, numeric_factor = eta, numeric_ordered #>                = kendall, factor_ordered = cramersv #>   Threshold:   0.500 #>   Subsets:     1 valid combinations #>   Data Rows:   15 used in correlation #>   Forced-in:   height #>  #> Top combinations: #>   No.  Variables                          Avg    Max    Size #>   ------------------------------------------------------------ #>   [ 1] height, weight, group, score      0.173  0.474     4"},{"path":"https://gcol33.github.io/corrselect/reference/CorrCombo.html","id":null,"dir":"Reference","previous_headings":"","what":"CorrCombo S4 class — CorrCombo","title":"CorrCombo S4 class — CorrCombo","text":"Holds result corrSelect MatSelect: list valid variable combinations correlation statistics. class stores subsets variables meet specified correlation constraint, along metadata algorithm used, correlation method(s), variables forced every subset, summary statistics combination. S4 class stores result correlation-based subset selection.","code":""},{"path":"https://gcol33.github.io/corrselect/reference/CorrCombo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CorrCombo S4 class — CorrCombo","text":"","code":"# S4 method for class 'CorrCombo' show(object)"},{"path":"https://gcol33.github.io/corrselect/reference/CorrCombo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CorrCombo S4 class — CorrCombo","text":"object CorrCombo object printed.","code":""},{"path":"https://gcol33.github.io/corrselect/reference/CorrCombo.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"CorrCombo S4 class — CorrCombo","text":"subset_list list character vectors. vector valid subset (variable names). avg_corr numeric vector. Average absolute correlation within subset. min_corr numeric vector. Minimum pairwise absolute correlation subset. max_corr numeric vector. Maximum pairwise absolute correlation within subset. names Character vector variable names used decoding. threshold Numeric scalar. correlation threshold used selection. forced_in Character vector. Variable names forced subset. search_type Character string. One \"els\" \"bron-kerbosch\". cor_method Character string. Either single method (e.g. \"pearson\") \"mixed\" multiple methods used. n_rows_used Integer. Number rows used computing correlation matrix (removing missing values). subset_list list character vectors, representing subset variable names. avg_corr Numeric vector: average correlation subset. min_corr Numeric vector: minimum correlation subset. max_corr Numeric vector: maximum correlation subset. names Character vector variable names original matrix. threshold Numeric threshold used correlation filtering. forced_in Character vector variables forced subsets. search_type Character: search algorithm used (e.g., \"els\", \"bron-kerbosch\"). cor_method Character: correlation method used. n_rows_used Integer: number rows used compute correlations.","code":""},{"path":[]},{"path":"https://gcol33.github.io/corrselect/reference/CorrCombo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CorrCombo S4 class — CorrCombo","text":"","code":"show(new(\"CorrCombo\",   subset_list = list(c(\"A\", \"B\"), c(\"A\", \"C\")),   avg_corr = c(0.2, 0.3),   min_corr = c(0.1, 0.2),   max_corr = c(0.3, 0.4),   names = c(\"A\", \"B\", \"C\"),   threshold = 0.5,   forced_in = character(),   search_type = \"els\",   cor_method = \"mixed\",   n_rows_used = as.integer(5) )) #> CorrCombo object #> ----------------- #>   Method:      els #>   Correlation: mixed #>   Threshold:   0.500 #>   Subsets:     2 valid combinations #>   Data Rows:   5 used in correlation #>  #> Top combinations: #>   No.  Variables                          Avg    Max    Size #>   ------------------------------------------------------------ #>   [ 1] A, B                              0.200  0.300     2 #>   [ 2] A, C                              0.300  0.400     2"},{"path":"https://gcol33.github.io/corrselect/reference/corrSelect.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Variable Subsets with Low Correlation (Data Frame Interface) — corrSelect","title":"Select Variable Subsets with Low Correlation (Data Frame Interface) — corrSelect","text":"Identifies combinations numeric variables data frame pairwise absolute correlations fall specified threshold. function wrapper around MatSelect() accepts data frames, tibbles, data tables automatic preprocessing.","code":""},{"path":"https://gcol33.github.io/corrselect/reference/corrSelect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Variable Subsets with Low Correlation (Data Frame Interface) — corrSelect","text":"","code":"corrSelect(   df,   threshold = 0.7,   method = NULL,   force_in = NULL,   cor_method = c(\"pearson\", \"spearman\", \"kendall\", \"bicor\", \"distance\", \"maximal\"),   ... )"},{"path":"https://gcol33.github.io/corrselect/reference/corrSelect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Variable Subsets with Low Correlation (Data Frame Interface) — corrSelect","text":"df data frame. numeric columns used. threshold numeric value (0, 1). Maximum allowed absolute correlation. Defaults 0.7. method Character. Selection algorithm use. One \"els\" \"bron-kerbosch\". specified, function chooses automatically: \"els\" force_in provided, otherwise \"bron-kerbosch\". force_in Optional character vector numeric indices columns force subsets. cor_method Character string indicating correlation method use. One \"pearson\" (default), \"spearman\", \"kendall\", \"bicor\", \"distance\", \"maximal\". ... Additional arguments passed MatSelect(), e.g., use_pivot.","code":""},{"path":"https://gcol33.github.io/corrselect/reference/corrSelect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Variable Subsets with Low Correlation (Data Frame Interface) — corrSelect","text":"object class CorrCombo, containing selected subsets correlation statistics.","code":""},{"path":"https://gcol33.github.io/corrselect/reference/corrSelect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select Variable Subsets with Low Correlation (Data Frame Interface) — corrSelect","text":"numeric columns used correlation analysis. Non‐numeric columns (factors, characters, logicals, etc.) ignored, names types printed inform user. can optionally reattached later using corrSubset() keepExtra = TRUE. Rows missing values removed computing correlations. warning issued rows dropped. cor_method controls correlation matrix computed: \"pearson\": Standard linear correlation. \"spearman\": Rank-based monotonic correlation. \"kendall\": Kendall's tau. \"bicor\": Biweight midcorrelation (WGCNA::bicor). \"distance\": Distance correlation (energy::dcor). \"maximal\": Maximal information coefficient (minerva::mine). \"bicor\", \"distance\", \"maximal\", corresponding package must installed.","code":""},{"path":[]},{"path":"https://gcol33.github.io/corrselect/reference/corrSelect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Variable Subsets with Low Correlation (Data Frame Interface) — corrSelect","text":"","code":"set.seed(42) n <- 100  # Create 20 variables: 5 blocks of correlated variables + some noise block1 <- matrix(rnorm(n * 4), ncol = 4) block2 <- matrix(rnorm(n), ncol = 1) block2 <- matrix(rep(block2, 4), ncol = 4) + matrix(rnorm(n * 4, sd = 0.1), ncol = 4) block3 <- matrix(rnorm(n * 4), ncol = 4) block4 <- matrix(rnorm(n * 4), ncol = 4) block5 <- matrix(rnorm(n * 4), ncol = 4)  df <- as.data.frame(cbind(block1, block2, block3, block4, block5)) colnames(df) <- paste0(\"V\", 1:20)  # Add a non-numeric column to be ignored df$label <- factor(sample(c(\"A\", \"B\"), n, replace = TRUE))  # Basic usage corrSelect(df, threshold = 0.8) #> The following variables were excluded from the correlation analysis: #>   - label: unordered factor (excluded) #> CorrCombo object #> ----------------- #>   Method:      bron-kerbosch #>   Correlation: pearson #>   Threshold:   0.800 #>   Subsets:     4 valid combinations #>   Data Rows:   100 used in correlation #>   Pivot:       TRUE #>  #> Top combinations: #>   No.  Variables                          Avg    Max    Size #>   ------------------------------------------------------------ #>   [ 1] V1, V2, V3, V4, V7, V9, ...       0.075  0.241    17 #>   [ 2] V1, V2, V3, V4, V6, V9, ...       0.075  0.259    17 #>   [ 3] V1, V2, V3, V4, V8, V9, ...       0.075  0.269    17 #>   [ 4] V1, V2, V3, V4, V5, V9, ...       0.076  0.288    17  # Try Bron–Kerbosch with pivoting corrSelect(df, threshold = 0.6, method = \"bron-kerbosch\", use_pivot = TRUE) #> The following variables were excluded from the correlation analysis: #>   - label: unordered factor (excluded) #> CorrCombo object #> ----------------- #>   Method:      bron-kerbosch #>   Correlation: pearson #>   Threshold:   0.600 #>   Subsets:     4 valid combinations #>   Data Rows:   100 used in correlation #>   Pivot:       TRUE #>  #> Top combinations: #>   No.  Variables                          Avg    Max    Size #>   ------------------------------------------------------------ #>   [ 1] V1, V2, V3, V4, V7, V9, ...       0.075  0.241    17 #>   [ 2] V1, V2, V3, V4, V6, V9, ...       0.075  0.259    17 #>   [ 3] V1, V2, V3, V4, V8, V9, ...       0.075  0.269    17 #>   [ 4] V1, V2, V3, V4, V5, V9, ...       0.076  0.288    17  # Force in a specific variable and use Spearman correlation corrSelect(df, threshold = 0.6, force_in = \"V10\", cor_method = \"spearman\") #> The following variables were excluded from the correlation analysis: #>   - label: unordered factor (excluded) #> CorrCombo object #> ----------------- #>   Method:      els #>   Correlation: spearman #>   Threshold:   0.600 #>   Subsets:     4 valid combinations #>   Data Rows:   100 used in correlation #>   Forced-in:   V10 #>  #> Top combinations: #>   No.  Variables                          Avg    Max    Size #>   ------------------------------------------------------------ #>   [ 1] V1, V2, V3, V4, V7, V9, ...       0.076  0.239    17 #>   [ 2] V1, V2, V3, V4, V5, V9, ...       0.076  0.269    17 #>   [ 3] V1, V2, V3, V4, V8, V9, ...       0.076  0.246    17 #>   [ 4] V1, V2, V3, V4, V6, V9, ...       0.076  0.252    17"},{"path":"https://gcol33.github.io/corrselect/reference/corrSubset.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Variable Subsets from a CorrCombo Object — corrSubset","title":"Extract Variable Subsets from a CorrCombo Object — corrSubset","text":"Extracts one variable subsets CorrCombo object data frames. Typically used corrSelect MatSelect obtain filtered versions original dataset containing low‐correlation variable combinations.","code":""},{"path":"https://gcol33.github.io/corrselect/reference/corrSubset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Variable Subsets from a CorrCombo Object — corrSubset","text":"","code":"corrSubset(res, df, which = \"best\", keepExtra = FALSE)"},{"path":"https://gcol33.github.io/corrselect/reference/corrSubset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Variable Subsets from a CorrCombo Object — corrSubset","text":"res CorrCombo object returned corrSelect MatSelect. df data frame matrix. Must contain variables listed res@names. Columns res@names ignored unless keepExtra = TRUE. Subsets extract. One : \"best\" (default) 1: top‐ranked subset. single integer (e.g. 2): nth ranked subset. vector integers (e.g. 1:3): multiple subsets. \"\": available subsets. Subsets ranked decreasing size, increasing average correlation. keepExtra Logical. TRUE, columns df res@names (e.g., factors, characters) retained. Defaults FALSE.","code":""},{"path":"https://gcol33.github.io/corrselect/reference/corrSubset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Variable Subsets from a CorrCombo Object — corrSubset","text":"data frame single subset extracted, list data frames multiple subsets extracted. data frame contains selected variables (optionally extras).","code":""},{"path":"https://gcol33.github.io/corrselect/reference/corrSubset.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract Variable Subsets from a CorrCombo Object — corrSubset","text":"warning issued rows contain missing values selected variables.","code":""},{"path":[]},{"path":"https://gcol33.github.io/corrselect/reference/corrSubset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Variable Subsets from a CorrCombo Object — corrSubset","text":"","code":"# Simulate input data set.seed(123) df <- as.data.frame(matrix(rnorm(100), nrow = 10)) colnames(df) <- paste0(\"V\", 1:10)  # Compute correlation matrix cmat <- cor(df)  # Select subsets using corrSelect res <- corrSelect(cmat, threshold = 0.5)  # Extract the best subset (default) corrSubset(res, df) #>            V2          V5        V10          V7 #> 1   1.2240818 -0.69470698  0.9935039  0.37963948 #> 2   0.3598138 -0.20791728  0.5483970 -0.50232345 #> 3   0.4007715 -1.26539635  0.2387317 -0.33320738 #> 4   0.1106827  2.16895597 -0.6279061 -1.01857538 #> 5  -0.5558411  1.20796200  1.3606524 -1.07179123 #> 6   1.7869131 -1.12310858 -0.6002596  0.30352864 #> 7   0.4978505 -0.40288484  2.1873330  0.44820978 #> 8  -1.9666172 -0.46665535  1.5326106  0.05300423 #> 9   0.7013559  0.77996512 -0.2357004  0.92226747 #> 10 -0.4727914 -0.08336907 -1.0264209  2.05008469  # Extract the second-best subset corrSubset(res, df, which = 2) #>             V1          V5        V10          V7 #> 1  -0.56047565 -0.69470698  0.9935039  0.37963948 #> 2  -0.23017749 -0.20791728  0.5483970 -0.50232345 #> 3   1.55870831 -1.26539635  0.2387317 -0.33320738 #> 4   0.07050839  2.16895597 -0.6279061 -1.01857538 #> 5   0.12928774  1.20796200  1.3606524 -1.07179123 #> 6   1.71506499 -1.12310858 -0.6002596  0.30352864 #> 7   0.46091621 -0.40288484  2.1873330  0.44820978 #> 8  -1.26506123 -0.46665535  1.5326106  0.05300423 #> 9  -0.68685285  0.77996512 -0.2357004  0.92226747 #> 10 -0.44566197 -0.08336907 -1.0264209  2.05008469  # Extract the first three subsets corrSubset(res, df, which = 1:3) #> $Subset1 #>            V2          V5        V10          V7 #> 1   1.2240818 -0.69470698  0.9935039  0.37963948 #> 2   0.3598138 -0.20791728  0.5483970 -0.50232345 #> 3   0.4007715 -1.26539635  0.2387317 -0.33320738 #> 4   0.1106827  2.16895597 -0.6279061 -1.01857538 #> 5  -0.5558411  1.20796200  1.3606524 -1.07179123 #> 6   1.7869131 -1.12310858 -0.6002596  0.30352864 #> 7   0.4978505 -0.40288484  2.1873330  0.44820978 #> 8  -1.9666172 -0.46665535  1.5326106  0.05300423 #> 9   0.7013559  0.77996512 -0.2357004  0.92226747 #> 10 -0.4727914 -0.08336907 -1.0264209  2.05008469 #>  #> $Subset2 #>             V1          V5        V10          V7 #> 1  -0.56047565 -0.69470698  0.9935039  0.37963948 #> 2  -0.23017749 -0.20791728  0.5483970 -0.50232345 #> 3   1.55870831 -1.26539635  0.2387317 -0.33320738 #> 4   0.07050839  2.16895597 -0.6279061 -1.01857538 #> 5   0.12928774  1.20796200  1.3606524 -1.07179123 #> 6   1.71506499 -1.12310858 -0.6002596  0.30352864 #> 7   0.46091621 -0.40288484  2.1873330  0.44820978 #> 8  -1.26506123 -0.46665535  1.5326106  0.05300423 #> 9  -0.68685285  0.77996512 -0.2357004  0.92226747 #> 10 -0.44566197 -0.08336907 -1.0264209  2.05008469 #>  #> $Subset3 #>            V2          V5          V6          V7 #> 1   1.2240818 -0.69470698  0.25331851  0.37963948 #> 2   0.3598138 -0.20791728 -0.02854676 -0.50232345 #> 3   0.4007715 -1.26539635 -0.04287046 -0.33320738 #> 4   0.1106827  2.16895597  1.36860228 -1.01857538 #> 5  -0.5558411  1.20796200 -0.22577099 -1.07179123 #> 6   1.7869131 -1.12310858  1.51647060  0.30352864 #> 7   0.4978505 -0.40288484 -1.54875280  0.44820978 #> 8  -1.9666172 -0.46665535  0.58461375  0.05300423 #> 9   0.7013559  0.77996512  0.12385424  0.92226747 #> 10 -0.4727914 -0.08336907  0.21594157  2.05008469 #>   # Extract all subsets corrSubset(res, df, which = \"all\") #> $Subset1 #>            V2          V5        V10          V7 #> 1   1.2240818 -0.69470698  0.9935039  0.37963948 #> 2   0.3598138 -0.20791728  0.5483970 -0.50232345 #> 3   0.4007715 -1.26539635  0.2387317 -0.33320738 #> 4   0.1106827  2.16895597 -0.6279061 -1.01857538 #> 5  -0.5558411  1.20796200  1.3606524 -1.07179123 #> 6   1.7869131 -1.12310858 -0.6002596  0.30352864 #> 7   0.4978505 -0.40288484  2.1873330  0.44820978 #> 8  -1.9666172 -0.46665535  1.5326106  0.05300423 #> 9   0.7013559  0.77996512 -0.2357004  0.92226747 #> 10 -0.4727914 -0.08336907 -1.0264209  2.05008469 #>  #> $Subset2 #>             V1          V5        V10          V7 #> 1  -0.56047565 -0.69470698  0.9935039  0.37963948 #> 2  -0.23017749 -0.20791728  0.5483970 -0.50232345 #> 3   1.55870831 -1.26539635  0.2387317 -0.33320738 #> 4   0.07050839  2.16895597 -0.6279061 -1.01857538 #> 5   0.12928774  1.20796200  1.3606524 -1.07179123 #> 6   1.71506499 -1.12310858 -0.6002596  0.30352864 #> 7   0.46091621 -0.40288484  2.1873330  0.44820978 #> 8  -1.26506123 -0.46665535  1.5326106  0.05300423 #> 9  -0.68685285  0.77996512 -0.2357004  0.92226747 #> 10 -0.44566197 -0.08336907 -1.0264209  2.05008469 #>  #> $Subset3 #>            V2          V5          V6          V7 #> 1   1.2240818 -0.69470698  0.25331851  0.37963948 #> 2   0.3598138 -0.20791728 -0.02854676 -0.50232345 #> 3   0.4007715 -1.26539635 -0.04287046 -0.33320738 #> 4   0.1106827  2.16895597  1.36860228 -1.01857538 #> 5  -0.5558411  1.20796200 -0.22577099 -1.07179123 #> 6   1.7869131 -1.12310858  1.51647060  0.30352864 #> 7   0.4978505 -0.40288484 -1.54875280  0.44820978 #> 8  -1.9666172 -0.46665535  0.58461375  0.05300423 #> 9   0.7013559  0.77996512  0.12385424  0.92226747 #> 10 -0.4727914 -0.08336907  0.21594157  2.05008469 #>  #> $Subset4 #>             V1          V5          V6          V7 #> 1  -0.56047565 -0.69470698  0.25331851  0.37963948 #> 2  -0.23017749 -0.20791728 -0.02854676 -0.50232345 #> 3   1.55870831 -1.26539635 -0.04287046 -0.33320738 #> 4   0.07050839  2.16895597  1.36860228 -1.01857538 #> 5   0.12928774  1.20796200 -0.22577099 -1.07179123 #> 6   1.71506499 -1.12310858  1.51647060  0.30352864 #> 7   0.46091621 -0.40288484 -1.54875280  0.44820978 #> 8  -1.26506123 -0.46665535  0.58461375  0.05300423 #> 9  -0.68685285  0.77996512  0.12385424  0.92226747 #> 10 -0.44566197 -0.08336907  0.21594157  2.05008469 #>  #> $Subset5 #>             V4          V5        V10 #> 1   0.42646422 -0.69470698  0.9935039 #> 2  -0.29507148 -0.20791728  0.5483970 #> 3   0.89512566 -1.26539635  0.2387317 #> 4   0.87813349  2.16895597 -0.6279061 #> 5   0.82158108  1.20796200  1.3606524 #> 6   0.68864025 -1.12310858 -0.6002596 #> 7   0.55391765 -0.40288484  2.1873330 #> 8  -0.06191171 -0.46665535  1.5326106 #> 9  -0.30596266  0.77996512 -0.2357004 #> 10 -0.38047100 -0.08336907 -1.0264209 #>  #> $Subset6 #>              V9          V5        V10 #> 1   0.005764186 -0.69470698  0.9935039 #> 2   0.385280401 -0.20791728  0.5483970 #> 3  -0.370660032 -1.26539635  0.2387317 #> 4   0.644376549  2.16895597 -0.6279061 #> 5  -0.220486562  1.20796200  1.3606524 #> 6   0.331781964 -1.12310858 -0.6002596 #> 7   1.096839013 -0.40288484  2.1873330 #> 8   0.435181491 -0.46665535  1.5326106 #> 9  -0.325931586  0.77996512 -0.2357004 #> 10  1.148807618 -0.08336907 -1.0264209 #>  #> $Subset7 #>            V3          V5        V10 #> 1  -1.0678237 -0.69470698  0.9935039 #> 2  -0.2179749 -0.20791728  0.5483970 #> 3  -1.0260044 -1.26539635  0.2387317 #> 4  -0.7288912  2.16895597 -0.6279061 #> 5  -0.6250393  1.20796200  1.3606524 #> 6  -1.6866933 -1.12310858 -0.6002596 #> 7   0.8377870 -0.40288484  2.1873330 #> 8   0.1533731 -0.46665535  1.5326106 #> 9  -1.1381369  0.77996512 -0.2357004 #> 10  1.2538149 -0.08336907 -1.0264209 #>  #> $Subset8 #>             V4          V5          V6 #> 1   0.42646422 -0.69470698  0.25331851 #> 2  -0.29507148 -0.20791728 -0.02854676 #> 3   0.89512566 -1.26539635 -0.04287046 #> 4   0.87813349  2.16895597  1.36860228 #> 5   0.82158108  1.20796200 -0.22577099 #> 6   0.68864025 -1.12310858  1.51647060 #> 7   0.55391765 -0.40288484 -1.54875280 #> 8  -0.06191171 -0.46665535  0.58461375 #> 9  -0.30596266  0.77996512  0.12385424 #> 10 -0.38047100 -0.08336907  0.21594157 #>  #> $Subset9 #>            V8          V6          V7 #> 1  -0.4910312  0.25331851  0.37963948 #> 2  -2.3091689 -0.02854676 -0.50232345 #> 3   1.0057385 -0.04287046 -0.33320738 #> 4  -0.7092008  1.36860228 -1.01857538 #> 5  -0.6880086 -0.22577099 -1.07179123 #> 6   1.0255714  1.51647060  0.30352864 #> 7  -0.2847730 -1.54875280  0.44820978 #> 8  -1.2207177  0.58461375  0.05300423 #> 9   0.1813035  0.12385424  0.92226747 #> 10 -0.1388914  0.21594157  2.05008469 #>  #> $Subset10 #>              V9          V5          V6 #> 1   0.005764186 -0.69470698  0.25331851 #> 2   0.385280401 -0.20791728 -0.02854676 #> 3  -0.370660032 -1.26539635 -0.04287046 #> 4   0.644376549  2.16895597  1.36860228 #> 5  -0.220486562  1.20796200 -0.22577099 #> 6   0.331781964 -1.12310858  1.51647060 #> 7   1.096839013 -0.40288484 -1.54875280 #> 8   0.435181491 -0.46665535  0.58461375 #> 9  -0.325931586  0.77996512  0.12385424 #> 10  1.148807618 -0.08336907  0.21594157 #>   # Extract best subset and retain additional numeric column df$CopyV1 <- df$V1 corrSubset(res, df, which = 1, keepExtra = TRUE) #>            V2          V5        V10          V7      CopyV1 #> 1   1.2240818 -0.69470698  0.9935039  0.37963948 -0.56047565 #> 2   0.3598138 -0.20791728  0.5483970 -0.50232345 -0.23017749 #> 3   0.4007715 -1.26539635  0.2387317 -0.33320738  1.55870831 #> 4   0.1106827  2.16895597 -0.6279061 -1.01857538  0.07050839 #> 5  -0.5558411  1.20796200  1.3606524 -1.07179123  0.12928774 #> 6   1.7869131 -1.12310858 -0.6002596  0.30352864  1.71506499 #> 7   0.4978505 -0.40288484  2.1873330  0.44820978  0.46091621 #> 8  -1.9666172 -0.46665535  1.5326106  0.05300423 -1.26506123 #> 9   0.7013559  0.77996512 -0.2357004  0.92226747 -0.68685285 #> 10 -0.4727914 -0.08336907 -1.0264209  2.05008469 -0.44566197"},{"path":"https://gcol33.github.io/corrselect/reference/MatSelect.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Variable Subsets with Low Correlation or Association (Matrix Interface) — MatSelect","title":"Select Variable Subsets with Low Correlation or Association (Matrix Interface) — MatSelect","text":"Identifies maximal subsets variables symmetric matrix (typically correlation matrix) pairwise absolute values stay specified threshold. Implements exact algorithms Eppstein–Löffler–Strash (ELS) Bron–Kerbosch (without pivoting).","code":""},{"path":"https://gcol33.github.io/corrselect/reference/MatSelect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Variable Subsets with Low Correlation or Association (Matrix Interface) — MatSelect","text":"","code":"MatSelect(mat, threshold = 0.7, method = NULL, force_in = NULL, ...)"},{"path":"https://gcol33.github.io/corrselect/reference/MatSelect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Variable Subsets with Low Correlation or Association (Matrix Interface) — MatSelect","text":"mat numeric, symmetric matrix 1s diagonal (e.g. correlation matrix). Column names (present) used label output variables. threshold numeric scalar (0, 1). Maximum allowed absolute pairwise value. Defaults 0.7. method Character. Selection algorithm use. One \"els\" \"bron-kerbosch\". specified, function chooses automatically: \"els\" force_in provided, otherwise \"bron-kerbosch\". force_in Optional integer vector 1-based column indices force every subset. ... Additional arguments passed backend, e.g., use_pivot (logical) enabling pivoting Bron–Kerbosch (ignored ELS).","code":""},{"path":"https://gcol33.github.io/corrselect/reference/MatSelect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Variable Subsets with Low Correlation or Association (Matrix Interface) — MatSelect","text":"object class CorrCombo, containing valid subsets correlation statistics.","code":""},{"path":"https://gcol33.github.io/corrselect/reference/MatSelect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Variable Subsets with Low Correlation or Association (Matrix Interface) — MatSelect","text":"","code":"set.seed(42) mat <- matrix(rnorm(100), ncol = 10) colnames(mat) <- paste0(\"V\", 1:10) cmat <- cor(mat)  # Default method (Bron-Kerbosch) res1 <- MatSelect(cmat, threshold = 0.5)  # Bron–Kerbosch without pivot res2 <- MatSelect(cmat, threshold = 0.5, method = \"bron-kerbosch\", use_pivot = FALSE)  # Bron–Kerbosch with pivoting res3 <- MatSelect(cmat, threshold = 0.5, method = \"bron-kerbosch\", use_pivot = TRUE)  # Force variable 1 into every subset (with warning if too correlated) res4 <- MatSelect(cmat, threshold = 0.5, force_in = 1)"},{"path":[]},{"path":"https://gcol33.github.io/corrselect/news/index.html","id":"bug-fixes-2-0-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"corrselect 2.0.1","text":"force_in MatSelect() now correctly accepts character column names. els now correctly lists valid subsets single variable forced . corrSelect() now displays appropriate warning one variable remains dropping unsupported columns. Association matrix construction assocSelect() now safely falls back 0 failed meaningless associations (e.g. empty chi-squared tables due sparse combinations unused factor levels).","code":""},{"path":"https://gcol33.github.io/corrselect/news/index.html","id":"features-added-2-0-1","dir":"Changelog","previous_headings":"","what":"Features Added","title":"corrselect 2.0.1","text":"assocSelect() now supports logical columns automatically converting factors.","code":""}]
